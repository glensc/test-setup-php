name: 'Extension workflow'
on:
  push:
jobs:
  run:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        #operating-system: [ubuntu-latest]
        operating-system: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, macos-latest]
        #php-versions: ['7.4']
        php-versions: ['5.3', '5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0']
    name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@develop
        with:
          php-version: ${{ matrix.php-versions }}
          tools: pecl
      - name: Add oci8 and pdo_oci
        continue-on-error: true
        run: |
          # Function to log result of a operation.
          add_log() {
            mark=$1
            subject=$2
            message=$3
            if [ "$mark" = "$tick" ]; then
              printf "\033[32;1m%s \033[0m\033[34;1m%s \033[0m\033[90;1m%s\033[0m\n" "$mark" "$subject" "$message"
            else
              printf "\033[31;1m%s \033[0m\033[34;1m%s \033[0m\033[90;1m%s\033[0m\n" "$mark" "$subject" "$message"
            fi
          }

          # Function to test if extension is loaded.
          check_extension() {
            extension=$1
            php -m | grep -i -q -w "$extension"
          }

          # Function to get the tag for a php version.
          get_tag() {
            master_version='8.0'
            tag='master'
            if [ ! "$version" = "$master_version" ]; then
                tag="php-$(php -v | head -n 1 | cut -f 2 -d ' ' | cut -f 1 -d '-')"
            fi
            echo "$tag"
          }

          # Function to install instantclient and SDK.
          install_client() {
            echo 'get_client'
            sudo mkdir -p -m 777 "$oracle_home"
            if [ ! -e "$oracle_client" ]; then
              for package in basiclite sdk; do
                if [ "$os" = 'Linux' ]; then
                  libs='/usr/lib/'
                  os_name='linux'
                  arch='linuxx64'
                  lib_ext='so'
                elif [ "$os" = 'Darwin' ]; then
                  libs='/usr/local/lib/'
                  os_name='mac'
                  arch='macos'
                  lib_ext='dylib'
                fi
                curl -o "/opt/oracle/$package.zip" -sSL "https://download.oracle.com/otn_software/$os_name/instantclient/instantclient-$package-$arch.zip"
                unzip "/opt/oracle/$package.zip" -d "$oracle_home"
              done
              sudo ln -sf /opt/oracle/instantclient*/*.$lib_ext* $libs
              sudo ln -sf /opt/oracle/instantclient* "$oracle_client"
            fi
            echo 'get_client_exit'
          }

          # Function to get PHP source.
          get_php() {
            echo 'get_php'
            [ ! -d "/opt/oracle/php-src-$tag" ] && curl -sSL "https://github.com/php/php-src/archive/$tag.tar.gz" | tar xzf - -C "$oracle_home/"
            echo 'get_php_exit'
          }

          # Function to get phpize location on darwin.
          get_phpize() {
            if [[ "$version" =~ 5.[3-5] ]]; then
                echo '/opt/local/bin/phpize'
            else
                echo "/usr/local/bin/$(readlink /usr/local/bin/phpize)"
            fi
          }

          # Function to patch phpize to link to php headers on darwin.
          patch_phpize() {
            if [ "$os" = "Darwin" ]; then
              sudo cp "$phpize_orig" "$phpize_orig.bck"
              sudo sed -i '' 's~includedir=.*~includedir="$(xcrun --show-sdk-path)/usr/include/php"~g' "$phpize_orig"
            fi
          }

          # Function to restore phpize.
          restore_phpize() {
            if [ "$os" = "Darwin" ]; then
              sudo mv "$phpize_orig.bck" "$phpize_orig" || true
            fi
          }

          # Function to patch pdo_oci.
          patch_pdo_oci_config() {
            curl -sSLO https://raw.githubusercontent.com/php/php-src/master/ext/pdo_oci/config.m4
            sudo sed -i '' "/PHP_CHECK_PDO_INCLUDES/d" config.m4 || sudo sed -i "/PHP_CHECK_PDO_INCLUDES/d" config.m4
          }

          # Function to install the dependencies.
          install_dependencies() {
            if [ "$runner" = "self-hosted" ] || [ "$RUNNER" = "self-hosted" ]; then
              if [ "$os" = 'Linux' ]; then
                sudo DEBIAN_FRONTEND=noninteractive apt-fast install -y autoconf automake libaio-dev gcc g++
              fi
            fi
          }

          # Function to install the extension.
          install_extension() {
            if ! [ -e "$ext_dir/$ext.so" ]; then
              (
                phpize_orig=$(get_phpize)
                tag=$(get_tag)
                get_php
                patch_phpize
                cd "/opt/oracle/php-src-$tag/ext/$ext" || exit 1
                [ "$ext" = "pdo_oci" ] && patch_pdo_oci_config
                sudo phpize && ./configure --with-php-config="$(command -v php-config)" --with-"$ext"=shared,instantclient,"$oracle_client"
                sudo make -j"$(nproc)"
                sudo cp ./modules/* "$ext_dir/"
                restore_phpize
              )
            fi
            echo "extension=$ext.so" | sudo tee "$scan_dir/99-$ext.ini"
          }
          for ext in pdo_oci oci8; do
            version=${{ matrix.php-versions }}
            tick='✓'
            cross='✗'
            oracle_home='/opt/oracle'
            oracle_client=$oracle_home/instantclient
            runner="${runner:-github}" && RUNNER="${RUNNER:-github}"
            os=$(uname -s)
            scan_dir=$(php --ini | grep additional | sed -e "s|.*: s*||")
            ext_dir=$(php -i | grep "extension_dir => /" | sed -e "s|.*=> s*||")
            install_client >/dev/null 2>&1
            install_dependencies >/dev/null 2>&1
            install_extension >/dev/null 2>&1
            (check_extension "$ext" && add_log "$tick" "$ext" "Installed and enabled") || add_log "$cross" "$ext" "Could not install $ext"
          done

      - name: Testing PHP version
        run: php -v
      - name: Testing Extensions
        run: |
          php -m
          php -r "if(! extension_loaded('oci8')) {throw new Exception('oci8 not found');}"
          php -r "if(! extension_loaded('PDO_OCI')) {throw new Exception('PDO_OCI not found');}"
