name: Test
on:
  push:
jobs:
  run:
    container: shivammathur/node:${{ matrix.container }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-20.04]
        container: ['focal', 'bionic', 'xenial']
    steps:
      - name: Add Prerequisues
        run: |
          apt-get update && apt-get install -y sudo software-properties-common
      - name: Run php.sh
        run: |
          #!/bin/bash -e

          # add repository
          apt-add-repository ppa:ondrej/php -y
          apt-get update

          # Install PHP
          for version in 5.6 7.0 7.1 7.2 7.3 7.4 8.0; do
              echo "Installing PHP $version"
              apt-get install -y --no-install-recommends \
                  php$version \
                  php$version-amqp \
                  php$version-apcu \
                  php$version-bcmath \
                  php$version-bz2 \
                  php$version-cgi \
                  php$version-cli \
                  php$version-common \
                  php$version-curl \
                  php$version-dba \
                  php$version-dev \
                  php$version-enchant \
                  php$version-fpm \
                  php$version-gd \
                  php$version-gmp \
                  php$version-igbinary \
                  php$version-imap \
                  php$version-interbase \
                  php$version-intl \
                  php$version-ldap \
                  php$version-mbstring \
                  php$version-memcache \
                  php$version-memcached \
                  php$version-mongodb \
                  php$version-mysql \
                  php$version-odbc \
                  php$version-opcache \
                  php$version-pgsql \
                  php$version-phpdbg \
                  php$version-pspell \
                  php$version-readline \
                  php$version-redis \
                  php$version-snmp \
                  php$version-soap \
                  php$version-sqlite3 \
                  php$version-sybase \
                  php$version-tidy \
                  php$version-xdebug \
                  php$version-xml \
                  php$version-xsl \
                  php$version-yaml \
                  php$version-zip \
                  php$version-zmq

              if [[ $version == "5.6" || $version == "7.0" || $version == "7.1" ]]; then
                  apt-get install -y --no-install-recommends php$version-mcrypt php$version-recode
              fi

              if [[ $version == "7.2" || $version == "7.3" ]]; then
                  apt-get install -y --no-install-recommends php$version-recode
              fi

              if [[ $version != "8.0" ]]; then
                  apt-get install -y --no-install-recommends php$version-xmlrpc php$version-json
              fi
          done

          apt-get install -y --no-install-recommends php-pear

          apt-get install -y --no-install-recommends snmp
      - name: Test PHP extensions
        run: |
          for version in 5.6 7.0 7.1 7.2 7.3 7.4 8.0; do
            for ext in amqp apcu bcmath bz2 cgi cli common curl dba dev enchant fpm gd gmp igbinary imap interbase intl ldap mbstring memcache memcached mongodb mysql odbc opcache pgsql phpdbg pspell readline redis snmp soap sqlite3 sybase tidy xdebug xml xsl yaml zip zmq recode; do
              php$version -r "if(! extension_loaded('$ext')) {throw new Exception('$ext not found on PHP $version');}"
            done
            if [[ $version == "5.6" || $version == "7.0" || $version == "7.1" ]]; then
                php$version -r "if(! extension_loaded('mcrypt')) {throw new Exception('mcrypt not found on PHP $version');}"
                php$version -r "if(! extension_loaded('recode')) {throw new Exception('recode not found on PHP $version');}"
            fi

            if [[ $version == "7.2" || $version == "7.3" ]]; then
                php$version -r "if(! extension_loaded('recode')) {throw new Exception('recode not found on PHP $version');}"
            fi

            if [[ $version != "8.0" ]]; then
                php$version -r "if(! extension_loaded('xmlrpc')) {throw new Exception('xmlrpc not found on PHP $version');}"
                php$version -r "if(! extension_loaded('json')) {throw new Exception('json not found on PHP $version');}"	            
            fi            
          done
