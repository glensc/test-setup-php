name: 'Extension workflow'
on:
  push:
jobs:
  run:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest, macos-latest]
        php-versions: ['5.6', '7.4']
    name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@develop
        with:
          php-version: ${{ matrix.php-versions }}
          tools: pecl
      - name: Add oci8 and pdo_oci
        continue-on-error: true
        run: |
          # Function to log result of a operation
          add_log() {
            mark=$1
            subject=$2
            message=$3
            if [ "$mark" = "$tick" ]; then
              printf "\033[32;1m%s \033[0m\033[34;1m%s \033[0m\033[90;1m%s\033[0m\n" "$mark" "$subject" "$message"
            else
              printf "\033[31;1m%s \033[0m\033[34;1m%s \033[0m\033[90;1m%s\033[0m\n" "$mark" "$subject" "$message"
            fi
          }

          # Function to test if extension is loaded.
          check_extension() {
            extension=$1
            if [ "$extension" != "mysql" ]; then
              php -m | grep -i -q -w "$extension"
            else
              php -m | grep -i -q "$extension"
            fi
          }

          # Function to get the tag for a php version
          get_tag() {
            master_version='8.0'
            tag='master'
            if [ ! "$version" = "$master_version" ] && [ ! "$extension" = "pdo_oci" ]; then
                tag="php-$(php -v | head -n 1 | cut -f 2 -d ' ' | cut -f 1 -d '-')"
            fi
            echo "$tag"
          }

          # Function to fetch the client and sdk
          get_client() {
            sudo mkdir -p -m 777 "$oracle_home"
            if [ ! -e "$oracle_client" ]; then
              for package in basiclite sdk; do
                if [ "$os" = 'Linux' ]; then
                  libs='/usr/lib/'
                  os_name='linux'
                  arch='linuxx64'
                  lib_ext='so'
                elif [ "$os" = 'Darwin' ]; then
                  libs='/usr/local/lib/'
                  os_name='mac'
                  arch='macos'
                  lib_ext='dylib'
                fi
                curl -o "/opt/oracle/$package.zip" -sSL "https://download.oracle.com/otn_software/$os_name/instantclient/instantclient-$package-$arch.zip"
                unzip "/opt/oracle/$package.zip" -d "$oracle_home"
              done
              sudo ln -sf /opt/oracle/instantclient*/*.so* $libs
              sudo ln -sf /opt/oracle/instantclient* /opt/oracle/instantclient
            fi
          }

          # Function to get PHP source
          get_php() {
            [ ! -d "/opt/oracle/php-src-$tag" ] && curl -sSL "https://github.com/php/php-src/archive/$tag.tar.gz" | tar xzf - -C "$oracle_home/"
          }

          # Function to patch phpize to get
          patch_phpize() {
            if [ "$os" = "Darwin" ]; then
              sudo cp "$phpize_orig" "$phpize_orig.bck"
              sudo sed -i '' 's~includedir=.*~includedir="$(xcrun --show-sdk-path)/usr/include/php"~g' "$phpize_orig"
            fi  
          }

          install_extension() {
            (
              cd "/opt/oracle/php-src-$tag/ext/$extension" || exit
              sudo phpize && ./configure --with-php-config="$(command -v php-config)" --with-"$extension"=instantclient,"$oracle_client"
              sudo make
              sudo cp ./modules/* "$(pecl config-get ext_dir)/"
              echo "extension=$extension.so" | sudo tee -a "$(pecl config-get php_ini)"
              [ "$os" = "Darwin" ] && sudo mv "$phpize_orig.bck" "$phpize_orig"
            )
          }

          tick="✓"
          cross="✗"
          version=${{ matrix.php-versions }}
          #extension=$2
          oracle_home='/opt/oracle'
          oracle_client=$oracle_home/instantclient
          phpize_orig=/usr/local/bin/$(readlink /usr/local/bin/phpize) || true
          os=$(uname -s)
          for extension in oci8 pdo_oci; do
            tag=$(get_tag)
            get_client
            get_php
            patch_phpize
            install_extension
            (check_extension "$extension" && add_log "$tick" "$extension" "Enabled") ||
            add_log "$cross" "$extension" "Could not install $extension"
          done       
      - name: Testing PHP version
        run: php -v
      - name: Testing Extensions
        run: php -m
