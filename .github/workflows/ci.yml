name: ci
on:
  push:
jobs:
  run:
    runs-on: ${{ matrix.operating-system }}

    strategy:
      fail-fast: false
      matrix:
        operating-system: [ 'ubuntu-latest' ]
        php-versions: [ 8.1, 8.0, 7.4, 7.3, 7.2 ]
        db: [ 'mysql', 'pgsql' ]

    name: PHP ${{ matrix.php-versions }} on ${{ matrix.db }}
    env:
      PHP_EXTENSIONS: ctype,curl,dom,iconv,imagick,intl,json,mbstring,openssl,pcre,pdo,reflection,spl,zip

    services:

      # Install Postgres
      pgsql:
        image: postgres:latest
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: craft_test
        ports:
          - 5432:5432
        # Set health checks to wait until Postgres has started
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

      # Install MySQL
      mysql:
        image: bitnami/mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: mysecretpassword
          MYSQL_DATABASE: craft_test
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        # Set health checks to wait until mysql has started
        options: --health-cmd="mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 3306:3306

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set default test command environment variable
      run: |
        echo "TEST_COMMAND=./vendor/bin/codecept run unit,functional" >> $GITHUB_ENV

    - name: Set test command for the code coverage environment
      run: |
        echo "TEST_COMMAND=./vendor/bin/codecept run unit,functional  --coverage-xml coverage.xml;" >> $GITHUB_ENV
      if: ${{ matrix.php-versions == '7.4' && matrix.db == 'mysql' }}

    - name: Setup cache environment
      id: extcache
      uses: shivammathur/cache-extensions@v1
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: ${{ env.PHP_EXTENSIONS }}
        key: test-key-v1

    - name: Cache extensions
      uses: actions/cache@v3
      with:
        path: ${{ steps.extcache.outputs.dir }}
        key: ${{ steps.extcache.outputs.key }}
        restore-keys: ${{ steps.extcache.outputs.key }}

    - name: Setup PHP
      uses: shivammathur/setup-php@verbose
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: ${{ env.PHP_EXTENSIONS }}
        ini-values: post_max_size=256M, max_execution_time=180, memory_limit=512M
        tools: composer:v2
        # if: matrix.php-versions != 7.4 && matrix.db != 'mysql'
        # coverage: none
      env:
        COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Print PHP version
      run: echo ${{ steps.setup-php.outputs.php-version }}

    - name: Setup problem matchers for PHP
      run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

    - name: Copy tests .env
      run: cp ./tests/.env.example.${{ matrix.db }} ./tests/.env

    - name: Update .env creds
      run: sed -i 's/DB_PASSWORD=/DB_PASSWORD=mysecretpassword/' tests/.env

    - name: Cache Composer dependencies
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Set Node
      uses: actions/setup-node@v1
      with:
        node-version: 16.x

    - name: Install Composer dependencies
      run: composer install --no-interaction --no-ansi --no-progress

    - name: Install NPM dependencies
      run: |
        npm cache clean -f
        npm install -g npm

    - name: Run tests
      run: ${{ env.TEST_COMMAND }}
